<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connect Four</title>
    <style>
        body { 
            text-align: center; 
            font-family: Arial, sans-serif; 
            background: linear-gradient(to right, #0072ff, #00c6ff);
        }
        .board { display: grid; grid-template-columns: repeat(7, 60px); gap: 5px; width: 455px; margin: 20px auto; }
        .cell { width: 60px; height: 60px; background-color: lightgray; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 24px; }
        .red { background-color: red; }
        .yellow { background-color: yellow; }
        button { margin-top: 20px; padding: 10px 20px; font-size: 16px; }
    </style>
</head>
<body>
    <h1>Connect Four</h1>
    <div class="board" id="board"></div>
    <button onclick="resetGame()">Restart Game</button>
    <script>
        const rows = 6, cols = 7;
        let board = Array.from({ length: rows }, () => Array(cols).fill(null));
        let currentPlayer = 'red';

        function createBoard() {
            const boardDiv = document.getElementById('board');
            boardDiv.innerHTML = '';
            for (let r = 0; r < rows; r++) {
                for (let c = 0; c < cols; c++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.row = r;
                    cell.dataset.col = c;
                    cell.addEventListener('click', () => placeDisc(c));
                    boardDiv.appendChild(cell);
                }
            }
        }

        function placeDisc(col) {
            for (let r = rows - 1; r >= 0; r--) {
                if (!board[r][col]) {
                    board[r][col] = currentPlayer;
                    updateBoard();
                    if (checkWin(r, col)) {
                        alert(`${currentPlayer.toUpperCase()} wins!`);
                        return;
                    }
                    currentPlayer = currentPlayer === 'red' ? 'yellow' : 'red';
                    return;
                }
            }
        }

        function updateBoard() {
            document.querySelectorAll('.cell').forEach(cell => {
                const r = cell.dataset.row, c = cell.dataset.col;
                cell.className = 'cell';
                if (board[r][c]) cell.classList.add(board[r][c]);
            });
        }

        function checkWin(row, col) {
            function count(dx, dy) {
                let r = row, c = col, count = 0;
                while (r >= 0 && r < rows && c >= 0 && c < cols && board[r][c] === currentPlayer) {
                    count++; r += dx; c += dy;
                }
                return count;
            }
            return (
                count(1, 0) + count(-1, 0) > 3 ||
                count(0, 1) + count(0, -1) > 3 ||
                count(1, 1) + count(-1, -1) > 3 ||
                count(1, -1) + count(-1, 1) > 3
            );
        }

        function resetGame() {
            board = Array.from({ length: rows }, () => Array(cols).fill(null));
            currentPlayer = 'red';
            createBoard();
        }

        createBoard();
    </script>
</body>
</html>
